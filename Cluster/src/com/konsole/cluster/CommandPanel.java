/*
 * Copyright (C) 2016 Pragalathan M <pragalathanm@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.konsole.cluster;

import com.konsole.cluster.lookup.Command;
import com.konsole.term.TerminalCookie;
import com.konsole.term.TerminalFactory;
import com.konsole.term.TerminalTopComponent;
import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import javax.swing.JTextField;
import org.openide.util.AsyncGUIJob;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.Utilities;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.TopComponent;

/**
 *
 * @author Pragalathan M <pragalathanm@gmail.com>
 */
public class CommandPanel extends TopComponent {

    private Lookup.Result<TerminalCookie> terminalCookieResult;
    private static final CommandPanel INSTANCE = new CommandPanel();
    private final InstanceContent ic = new InstanceContent();

    public static CommandPanel getInstance() {
        return INSTANCE;
    }

    /**
     * Creates new form CommandPanel
     */
    public CommandPanel() {
        initComponents();
        associateLookup(new AbstractLookup(ic));
        commandTextField.addFocusListener(new FocusAdapter() {

            @Override
            public void focusLost(FocusEvent e) {
                cleanLookup();
            }
        });
        Utilities.attachInitJob(this, new AsyncGUIJob() {

            @Override
            public void construct() {
                // calling this method later to avoid cicular dependency on GlobalActionContextProxy class
                addListeners();
            }

            @Override
            public void finished() {

            }
        });
    }

    public void addListeners() {
        this.terminalCookieResult = Utilities.actionsGlobalContext().lookupResult(TerminalCookie.class);
        this.terminalCookieResult.addLookupListener((LookupEvent ev) -> {
            commandTextField.setEnabled(!terminalCookieResult.allInstances().isEmpty());
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        commandTextField = new HintTextField();

        commandTextField.setText(org.openide.util.NbBundle.getMessage(CommandPanel.class, "CommandPanel.commandTextField.text")); // NOI18N
        commandTextField.setToolTipText(org.openide.util.NbBundle.getMessage(CommandPanel.class, "CommandPanel.commandTextField.toolTipText")); // NOI18N
        commandTextField.setEnabled(false);
        commandTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                commandTextFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(commandTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(commandTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void commandTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_commandTextFieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            executeCommand(commandTextField.getText());
        } else if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_L) {
            executeCommand("clear", false);
        }
    }//GEN-LAST:event_commandTextFieldKeyReleased

    private void executeCommand(String command) {
        executeCommand(command, true);
    }

    private void executeCommand(String command, boolean clearTextField) {
        for (TerminalTopComponent openedTerminal : TerminalFactory.openedTerminals.values()) {
            openedTerminal.execute(command);
        }
        if (clearTextField) {
            commandTextField.setText("");
        }
        updateLookup(command);
    }

    private void updateLookup(String command) {
        cleanLookup();
        ic.add(new Command(command));
    }

    private void cleanLookup() {
        Command cmd = getLookup().lookup(Command.class);
        if (cmd != null) {
            ic.remove(cmd);
        }
    }

    class HintTextField extends JTextField {

        String hint = org.openide.util.NbBundle.getMessage(CommandPanel.class, "CommandPanel.commandTextField.toolTipText");

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (getText().length() == 0 && !hasFocus()) {
                g.setColor(Color.LIGHT_GRAY);
                int padding = (getHeight() - getFont().getSize()) / 2;
                int inset = 3;
                g.drawString(hint, inset + 5, getHeight() - padding - inset);
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField commandTextField;
    // End of variables declaration//GEN-END:variables

}
