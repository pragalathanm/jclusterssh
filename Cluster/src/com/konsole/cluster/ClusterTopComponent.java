/*
 * Copyright (C) 2016 Pragalathan M <pragalathanm@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.konsole.cluster;

import com.konsole.term.TerminalFactory;
import com.konsole.term.TerminalTopComponent;
import com.sun.glass.events.KeyEvent;
import java.awt.event.ItemEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.jdesktop.beansbinding.Converter;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 *
 * @author Pragalathan M <pragalathanm@gmail.com>
 */
@ConvertAsProperties(
        dtd = "-//com.konsole.cluster//Cluster//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ClusterTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "com.konsole.cluster.ClusterTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ClusterAction",
        preferredID = "ClusterTopComponent"
)
@Messages({
    "CTL_ClusterAction=Cluster",
    "CTL_ClusterTopComponent=Cluster Window",
    "HINT_ClusterTopComponent=This is a Cluster window"
})
public final class ClusterTopComponent extends TopComponent {

    private List<TerminalTopComponent> openedTerminals = new ArrayList<>();

    public ClusterTopComponent() {
        initComponents();
        setName(Bundle.CTL_ClusterTopComponent());
        setToolTipText(Bundle.HINT_ClusterTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        commandTextField = new javax.swing.JTextField();
        runButton = new javax.swing.JButton();
        clusterComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        hostList = new javax.swing.JList();
        addGroupButton = new javax.swing.JButton();
        addHostButton = new javax.swing.JButton();
        loadGroupButton = new javax.swing.JButton();

        commandTextField.setText(org.openide.util.NbBundle.getMessage(ClusterTopComponent.class, "ClusterTopComponent.commandTextField.text")); // NOI18N
        commandTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                commandTextFieldKeyReleased(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(runButton, org.openide.util.NbBundle.getMessage(ClusterTopComponent.class, "ClusterTopComponent.runButton.text")); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, commandTextField, org.jdesktop.beansbinding.ELProperty.create("${text}"), runButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        binding.setConverter(STRING_TO_BOOLEAN_CONVERTER);
        bindingGroup.addBinding(binding);

        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        clusterComboBox.setModel(clusterModel);
        clusterComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                clusterComboBoxItemStateChanged(evt);
            }
        });

        hostList.setModel(hostModel);
        jScrollPane1.setViewportView(hostList);

        org.openide.awt.Mnemonics.setLocalizedText(addGroupButton, org.openide.util.NbBundle.getMessage(ClusterTopComponent.class, "ClusterTopComponent.addGroupButton.text")); // NOI18N
        addGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGroupButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(addHostButton, org.openide.util.NbBundle.getMessage(ClusterTopComponent.class, "ClusterTopComponent.addHostButton.text")); // NOI18N
        addHostButton.setEnabled(false);
        addHostButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHostButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(loadGroupButton, org.openide.util.NbBundle.getMessage(ClusterTopComponent.class, "ClusterTopComponent.loadGroupButton.text")); // NOI18N
        loadGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadGroupButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(commandTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clusterComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loadGroupButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addHostButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addGroupButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commandTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(runButton))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(clusterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(addGroupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addHostButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(loadGroupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(175, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        executeCommand(commandTextField.getText());
    }//GEN-LAST:event_runButtonActionPerformed

    private void commandTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_commandTextFieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            executeCommand(commandTextField.getText());
        } else if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_L) {
            executeCommand("clear", false);
        }
    }//GEN-LAST:event_commandTextFieldKeyReleased

    private void addGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGroupButtonActionPerformed
        String clusterName = JOptionPane.showInputDialog("Enter the cluster name: ");
        if (clusterName != null && !clusterName.isEmpty()) {
            final Cluster cluster = new Cluster(clusterName);
            clusterModel.addElement(cluster);
        }
    }//GEN-LAST:event_addGroupButtonActionPerformed

    private void addHostButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHostButtonActionPerformed
        String hostName = JOptionPane.showInputDialog("Enter the host name: ");
        if (hostName != null && !hostName.isEmpty()) {
            Cluster cluster = (Cluster) clusterModel.getSelectedItem();
            cluster.getHosts().add(hostName);
            hostModel.setHosts(cluster.getHosts());
        }
    }//GEN-LAST:event_addHostButtonActionPerformed

    private void clusterComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_clusterComboBoxItemStateChanged
        hostModel.clear();
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            hostModel.setHosts(((Cluster) clusterComboBox.getSelectedItem()).getHosts());
            addHostButton.setEnabled(true);
        }
    }//GEN-LAST:event_clusterComboBoxItemStateChanged

    private void loadGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadGroupButtonActionPerformed
        for (TerminalTopComponent openedTerminal : openedTerminals) {
            openedTerminal.close();
        }
        openedTerminals.clear();
        for (String host : hostModel.getHosts()) {
            openedTerminals.add(TerminalFactory.newTerminalTopComponent(host));
        }
    }//GEN-LAST:event_loadGroupButtonActionPerformed

    private void executeCommand(String command) {
        executeCommand(command, true);
    }

    private void executeCommand(String command, boolean clearTextField) {
        for (TerminalTopComponent openedTerminal : openedTerminals) {
            openedTerminal.execute(command);
        }
        if (clearTextField) {
            commandTextField.setText("");
        }
    }

    private TerminalTopComponent getTerminal() {
        return (TerminalTopComponent) WindowManager.getDefault().findMode("editor").getSelectedTopComponent();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addGroupButton;
    private javax.swing.JButton addHostButton;
    private javax.swing.JComboBox clusterComboBox;
    private javax.swing.JTextField commandTextField;
    private javax.swing.JList hostList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadGroupButton;
    private javax.swing.JButton runButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        try {
            List<Cluster> clusters = StoreManager.getClusters();

            for (Cluster cluster : clusters) {
                clusterModel.addElement(cluster);
            }
        } catch (IOException | ClassNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        }
        WindowManager.getDefault().getMainWindow().addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                try {
                    List<Cluster> clusters = new ArrayList<>();
                    for (int i = 0; i < clusterModel.getSize(); i++) {
                        clusters.add(clusterModel.getElementAt(i));
                    }
                    StoreManager.setClusters(clusters);
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        });
    }

    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private DefaultComboBoxModel<Cluster> clusterModel = new DefaultComboBoxModel<Cluster>();
    private HostListModel hostModel = new HostListModel();

    private final Converter< String, Boolean> STRING_TO_BOOLEAN_CONVERTER = new Converter<String, Boolean>() {

        @Override
        public Boolean convertForward(String value) {
            return !value.isEmpty();
        }

        @Override
        public String convertReverse(Boolean value) {
            return "";
        }
    };

    private class HostListModel extends AbstractListModel<String> {

        private List<String> hosts = Collections.<String>emptyList();
        private final List<String> EMPTY = Collections.<String>emptyList();

        void setHosts(List<String> hosts) {
            this.hosts = hosts;
            fireContentsChanged(this, 0, hosts.size());
        }

        void clear() {
            this.hosts = EMPTY;
        }

        @Override
        public int getSize() {
            return hosts.size();
        }

        @Override
        public String getElementAt(int index) {
            return hosts.get(index);
        }

        public List<String> getHosts() {
            return hosts;
        }
    }
}
