/*
 * Copyright (C) 2016 Pragalathan M <pragalathanm@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.konsole.cluster;

import com.konsole.term.TerminalFactory;
import com.konsole.term.TerminalTopComponent;
import com.sun.glass.events.KeyEvent;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import javax.swing.Box;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.Converter;
import org.jdesktop.beansbinding.ELProperty;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.Mnemonics;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 *
 * @author Pragalathan M <pragalathanm@gmail.com>
 */
@ConvertAsProperties(
        dtd = "-//com.konsole.cluster//Cluster//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = ClusterTopComponent.ID,
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "com.konsole.cluster.ClusterTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ClusterAction",
        preferredID = "ClusterTopComponent"
)
@Messages({
    "CTL_ClusterAction=Cluster",
    "CTL_ClusterTopComponent=Cluster",
    "HINT_ClusterTopComponent=This shows the cluster view"
})
public final class ClusterTopComponent extends TopComponent {

    public static final String ID = "ClusterTopComponent";
    private InstanceContent ic = new InstanceContent();

    public ClusterTopComponent() {
        initComponents();
        setName(Bundle.CTL_ClusterTopComponent());
        setToolTipText(Bundle.HINT_ClusterTopComponent());
        associateLookup(new AbstractLookup(ic));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new BindingGroup();

        commandTextField = new JTextField();
        runButton = new JButton();
        filler1 = new Box.Filler(new Dimension(0, 0), new Dimension(0, 0), new Dimension(0, 0));

        commandTextField.setText(NbBundle.getMessage(ClusterTopComponent.class, "ClusterTopComponent.commandTextField.text")); // NOI18N
        commandTextField.addKeyListener(new KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                commandTextFieldKeyReleased(evt);
            }
        });

        Mnemonics.setLocalizedText(runButton, NbBundle.getMessage(ClusterTopComponent.class, "ClusterTopComponent.runButton.text")); // NOI18N

        Binding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ, commandTextField, ELProperty.create("${text}"), runButton, BeanProperty.create("enabled"));
        binding.setConverter(STRING_TO_BOOLEAN_CONVERTER);
        bindingGroup.addBinding(binding);

        runButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(commandTextField, GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(filler1, GroupLayout.PREFERRED_SIZE, 82, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(commandTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(runButton))
                .addGap(277, 277, 277)
                .addComponent(filler1, GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                .addContainerGap())
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        executeCommand(commandTextField.getText());
    }//GEN-LAST:event_runButtonActionPerformed

    private void commandTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_commandTextFieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            executeCommand(commandTextField.getText());
        } else if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_L) {
            executeCommand("clear", false);
        }
    }//GEN-LAST:event_commandTextFieldKeyReleased

    private void executeCommand(String command) {
        executeCommand(command, true);
    }

    private void executeCommand(String command, boolean clearTextField) {
        for (TerminalTopComponent openedTerminal : TerminalFactory.openedTerminals.values()) {
            openedTerminal.execute(command);
        }
        if (clearTextField) {
            commandTextField.setText("");
        }
    }

    private TerminalTopComponent getTerminal() {
        return (TerminalTopComponent) WindowManager.getDefault().findMode("editor").getSelectedTopComponent();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTextField commandTextField;
    private Box.Filler filler1;
    private JButton runButton;
    private BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {

    }

    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private final Converter< String, Boolean> STRING_TO_BOOLEAN_CONVERTER = new Converter<String, Boolean>() {

        @Override
        public Boolean convertForward(String value) {
            return !value.isEmpty();
        }

        @Override
        public String convertReverse(Boolean value) {
            return "";
        }
    };
}
