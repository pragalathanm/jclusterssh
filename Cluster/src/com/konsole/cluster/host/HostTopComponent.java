/*
 * Copyright (C) 2016 Pragalathan M <pragalathanm@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.konsole.cluster.host;

import com.konsole.cluster.Cluster;
import com.konsole.cluster.cookie.HostCookie;
import com.konsole.cluster.nodes.factory.HostChildFactory;
import java.util.ArrayList;
import java.util.Collection;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.TopComponent;

@ConvertAsProperties(
        dtd = "-//com.konsole.cluster//Host//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "HostTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "properties", openAtStartup = true)
@ActionID(category = "Window", id = "com.konsole.cluster.HostTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_HostAction",
        preferredID = "HostTopComponent"
)
@Messages({
    "CTL_HostAction=Host",
    "CTL_HostTopComponent=Hosts",
    "HINT_HostTopComponent=Displays all the host of a selected cluster"
})
public final class HostTopComponent extends TopComponent implements ExplorerManager.Provider {

    private ExplorerManager em = new ExplorerManager();
    private InstanceContent ic = new InstanceContent();
    private HostChildFactory hostChildFactory = new HostChildFactory(new ArrayList<Host>());
    Lookup.Result<Cluster> clusterResult;
    Lookup.Result<Host> hostResult;

    public HostTopComponent() {
        initComponents();
        setName(Bundle.CTL_HostTopComponent());
        setToolTipText(Bundle.HINT_HostTopComponent());

        Lookup lookup = ExplorerUtils.createLookup(em, this.getActionMap());
        associateLookup(new ProxyLookup(lookup, new AbstractLookup(ic)));

        AbstractNode root = new AbstractNode(Children.create(hostChildFactory, true));
        em.setRootContext(root);
        clusterResult = Utilities.actionsGlobalContext().lookupResult(Cluster.class);
        clusterResult.addLookupListener(new LookupListener() {

            @Override
            public void resultChanged(LookupEvent ev) {
                Collection<? extends Cluster> clusters = clusterResult.allInstances();
                hostChildFactory.removeAll();
                if (clusters.size() == 1) {
                    hostChildFactory.setEntries(clusters.iterator().next().getHosts());
                }
            }
        });
        clusterResult.allItems();

        hostResult = getLookup().lookupResult(Host.class);
        hostResult.addLookupListener(new LookupListener() {

            @Override
            public void resultChanged(LookupEvent ev) {
                if (clusterResult.allInstances().isEmpty()) {
                    ic.remove(hostCookie);
                } else {
                    ic.add(hostCookie);
                }
            }
        });
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listView1 = new org.openide.explorer.view.ListView();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(listView1, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(listView1, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.openide.explorer.view.ListView listView1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private HostCookie hostCookie = new HostCookie() {

        @Override
        public void removeHost() {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
    };
}
